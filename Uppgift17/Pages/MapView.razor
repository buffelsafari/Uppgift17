@inject IJSRuntime JS

@using Models
@using ViewEntity


<canvas @ref="canvas" @onclick="OnClick" @onmousemove="OnMouseMove" @onmousewheel="OnMouseWheel" @onmousedown="OnMouseDown" style="background-color: black; width: 100vw; height: 100vh; overflow:hidden;">
</canvas>

<button class="btn btn-danger" style="position:absolute; left:0; top:0;">hello</button>
@code 
{
    [CascadingParameter]
    protected IEnumerable<DrawOperation> DrawOps { get; set; }

    

    private ElementReference canvas;
    private List<DrawOperation> drawList = new List<DrawOperation>();
    private double zoom = 1;
    private double rotation = 0;
    private double mouseDownX = 0;
    private double mouseDownY = 0;

    private double transX = 0;
    private double transY = 0;

    private bool isClicked = false;
    private double clickX=0;
    private double clickY=0;
    private bool isMoving = false;

    //private Entity baseEntity;




    protected override async Task OnInitializedAsync()
    {
        //baseEntity = new Entity();

        //baseEntity.AddOperation(new DrawOperation { Operation = "clear", Data = null });
        //baseEntity.AddOperation(new DrawOperation { Operation = "beginPath", Data = null });
        //baseEntity.AddOperation(new DrawOperation { Operation = "moveTo", Data = new int[] { 0, 0 } });
        //baseEntity.AddOperation(new DrawOperation { Operation = "lineTo", Data = new int[] { 100, 100 } });
        //baseEntity.AddOperation(new DrawOperation { Operation = "lineTo", Data = new int[] { 500, 100 } });
        //baseEntity.AddOperation(new DrawOperation { Operation = "lineTo", Data = new int[] { 700, 600 } });
        //baseEntity.AddOperation(new DrawOperation { Operation = "arcCW", Data = new int[] { 600, 600, 100, 0, 180 } });
        //baseEntity.AddOperation(new DrawOperation { Operation = "arcCCW", Data = new int[] { 400, 600, 100, 0, 180 } });
        //baseEntity.AddOperation(new DrawOperation { Operation = "testClick", TargetId = Guid.NewGuid().ToString("n"), Data = null });
        //baseEntity.AddOperation(new DrawOperation { Operation = "strokeRGBA", Data = new int[] { 255, 255, 0, 128 } });
        //baseEntity.AddOperation(new DrawOperation { Operation = "lineWidth", Data = new int[] { 10 } });
        //baseEntity.AddOperation(new DrawOperation { Operation = "stroke", Data = null });


        //Entity child = new Entity();
        ////child.AddOperation(new DrawOperation { Operation = "clear", Data = null });
        //child.AddOperation(new DrawOperation { Operation = "beginPath", Data = null });
        //child.AddOperation(new DrawOperation { Operation = "moveTo", Data = new int[] { 500, 500 } });
        //child.AddOperation(new DrawOperation { Operation = "lineTo", Data = new int[] { 600, 500 } });
        //child.AddOperation(new DrawOperation { Operation = "lineTo", Data = new int[] { 600, 600 } });
        //child.AddOperation(new DrawOperation { Operation = "lineTo", Data = new int[] { 500, 600 } });

        //child.AddOperation(new DrawOperation { Operation = "testClick", TargetId = Guid.NewGuid().ToString("n"), Data = null });
        //child.AddOperation(new DrawOperation { Operation = "closePath", Data = null });
        //child.AddOperation(new DrawOperation { Operation = "strokeRGBA", Data = new int[] { 255, 255, 0, 128 } });
        //child.AddOperation(new DrawOperation { Operation = "lineWidth", Data = new int[] { 10 } });
        //child.AddOperation(new DrawOperation { Operation = "stroke", Data = null });

        //baseEntity.AddChild(child);





        //drawList.Add(new DrawOperation { Operation = "clear", Data = null });
        //drawList.Add(new DrawOperation { Operation = "beginPath", Data = null });
        //drawList.Add(new DrawOperation { Operation = "moveTo", Data = new int[]{0,0 } });
        //drawList.Add(new DrawOperation { Operation = "lineTo", Data = new int[] { 100, 100 } });
        //drawList.Add(new DrawOperation { Operation = "lineTo", Data = new int[] { 500, 100 } });
        //drawList.Add(new DrawOperation { Operation = "lineTo", Data = new int[] { 700, 600 } });
        //drawList.Add(new DrawOperation { Operation = "arcCW", Data = new int[] { 600, 600, 100, 0, 180 } });
        //drawList.Add(new DrawOperation { Operation = "arcCCW", Data = new int[] { 400, 600, 100, 0, 180 } });
        //drawList.Add(new DrawOperation { Operation = "testClick", TargetId=Guid.NewGuid().ToString("n"), Data = null });
        //drawList.Add(new DrawOperation { Operation = "strokeRGBA", Data = new int[] { 255, 255,0,128 } });
        //drawList.Add(new DrawOperation { Operation = "lineWidth", Data = new int[] { 10 } });
        //drawList.Add(new DrawOperation { Operation = "stroke", Data = null });


        await JS.InvokeVoidAsync("AddResizeListener", DotNetObjectReference.Create(this), "OnResize", canvas);
        await JS.InvokeVoidAsync("RequestAnimationFrame", DotNetObjectReference.Create(this), "Redraw", canvas);

        await base.OnInitializedAsync();
    }



    private async Task OnClick(MouseEventArgs args)
    {
        Console.WriteLine(DrawOps);

        //Console.WriteLine("clicked on X:" + (mouseDownX));
        //Console.WriteLine("clicked on X:" + (mouseDownY));

        isClicked = true;
        await JS.InvokeVoidAsync("RequestAnimationFrame", DotNetObjectReference.Create(this), "Redraw", canvas);





    }

    private void OnMouseDown(MouseEventArgs args)
    {
        mouseDownX = (args.OffsetX/zoom-transX);
        mouseDownY = (args.OffsetY/zoom-transY);

        clickX = args.OffsetX;
        clickY = args.OffsetY;

        isMoving = true;

    }


    private async Task OnMouseMove(MouseEventArgs args)
    {
        if (isMoving & args.Buttons == 1)
        {

            transX = (args.OffsetX / zoom - mouseDownX);
            transY = (args.OffsetY / zoom - mouseDownY);

            await JS.InvokeVoidAsync("RequestAnimationFrame", DotNetObjectReference.Create(this), "Redraw", canvas);
        }
        else
        {
            isMoving = false;
        }

    }

    private async Task OnMouseWheel(WheelEventArgs args)
    {

        float deltaZoom = (float)(args.DeltaY * 0.0001f);
        zoom += deltaZoom;

        if (zoom < 0.25f)
        {
            zoom = 0.25f;
        }
        if (zoom > 2.0f)
        {
            zoom = 2.0f;
        }




        await JS.InvokeVoidAsync("RequestAnimationFrame", DotNetObjectReference.Create(this), "Redraw", canvas);

        Console.WriteLine("the buttons in the mouse wheeler"+args.Buttons);
    }




    [JSInvokable]
    public async Task Redraw()
    {
        // Console.WriteLine("hello from redraw");



        await JS.InvokeVoidAsync("Draw", canvas, DrawOps, zoom, transX, transY, rotation, clickX, clickY, isClicked, DotNetObjectReference.Create(this), "OnMapClick");
        isClicked = false;
    }

    [JSInvokable]
    public async Task OnResize()
    {
        Console.WriteLine("hello resize");
        await JS.InvokeVoidAsync("RequestAnimationFrame", DotNetObjectReference.Create(this), "Redraw", canvas);
    }

    [JSInvokable]
    public async Task OnMapClick(string id)
    {
        Console.WriteLine("hello from OnMapClick:"+id);
        //await JS.InvokeVoidAsync("RequestAnimationFrame", DotNetObjectReference.Create(this), "Redraw", canvas);
    }
}
