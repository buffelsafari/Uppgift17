@inject IJSRuntime JS

@using Models
@using ViewEntity
@using MapViewFSM



<canvas @ref="canvas" @onclick="OnClick" @onmousemove="OnMouseMove" @onmousewheel="OnMouseWheel" @onmousedown="OnMouseDown" @onmouseup="OnMouseUp" style="background-color: black; width: 100vw; height: 100vh; overflow:hidden;">
</canvas>

<button class="btn btn-danger" style="position:absolute; left:0; top:0;">hello</button>
@code 
{
    [CascadingParameter]
    public Task<IEnumerable<DrawOperation>> DrawOps { get; set; }

    [Parameter]
    public Action<string> OnMachineClick { get; set; }

    [Parameter]
    public Action<string> OnMachineDown { get; set; }

    [Parameter]
    public Action<string, double, double> OnTranslateEntity { get; set; }

    [Parameter]
    public Action OnStopTranslateEntity { get; set; }


    

    public double Zoom { get; set; } = 1;





    public double Rotation { get; set; } = 0;
    public double TransX { get; set; } = 0;
    public double TransY { get; set; } = 0;


    public double ClickX { get; set; } = 0;
    public double ClickY { get; set; } = 0;
    public bool IsClicked { get; set; } = false;
    public bool IsMoving { get; set; } = false;






    private ElementReference canvas;
    public Func<MouseEventArgs, Task> OnClick;
    public Func<MouseEventArgs, Task> OnMouseDown;
    public Func<MouseEventArgs, Task> OnMouseUp;
    public Func<MouseEventArgs, Task> OnMouseMove;

    public Func<WheelEventArgs, Task> OnMouseWheel;

    public Func<string, TransformMatrix, Task> OnMapClicked;











    protected async override Task OnParametersSetAsync()
    {
        //await currentState.OnParametersSetAsync();
        await JS.InvokeVoidAsync("RequestAnimationFrame", DotNetObjectReference.Create(this), "Redraw", false);
        base.OnParametersSet();
    }



    protected override async Task OnInitializedAsync()
    {
        BaseState.InitFSM(IdleState.GetInstance(), this, JS, canvas, new StateChangeArgs{ X=0, Y=0 });

        //BaseState.ChangeState(RotateState.GetInstance());


        await JS.InvokeVoidAsync("AddResizeListener", DotNetObjectReference.Create(this), "OnResize", canvas);
        await base.OnInitializedAsync();
    }








    [JSInvokable]
    public async Task Redraw(bool test)
    {
        //Console.WriteLine("hello from redraw should test?:"+ test);
        await JS.InvokeVoidAsync("Draw", canvas, await DrawOps, Zoom, TransX, TransY, Rotation, ClickX, ClickY, test, DotNetObjectReference.Create(this), "OnMapDown");
        IsClicked = false;
    }

    [JSInvokable]
    public async Task OnResize()
    {
        Console.WriteLine("hello resize");
        await JS.InvokeVoidAsync("RequestAnimationFrame", DotNetObjectReference.Create(this), "Redraw", false);
    }

    //[JSInvokable]
    //public async Task OnMapClick(string id)
    //{
    //    Console.WriteLine("hello from OnMapClick:"+id);

    //    OnMachineClick.Invoke("Hello from ChildComponent id:"+id);



    //    //await JS.InvokeVoidAsync("RequestAnimationFrame", DotNetObjectReference.Create(this), "Redraw", canvas);
    //}

    [JSInvokable]
    public async Task OnMapDown(string id, TransformMatrix matrix)
    {

        //Console.WriteLine("matrix -----------------------------------------------------------------"+matrix.e );
        //Console.WriteLine("a:" + matrix.a);
        //Console.WriteLine("b:" + matrix.b);
        //Console.WriteLine("c:" + matrix.c);
        //Console.WriteLine("d:" + matrix.d);
        //Console.WriteLine("e:" + matrix.e);
        //Console.WriteLine("f:" + matrix.f);
        //Console.WriteLine("hello from OnMapDown:" + id);
        //isMachineGrabbed = true;

        OnMapClicked?.DynamicInvoke(id, matrix);// todo rename

        //OnMachineDown.Invoke("Hello from ChildComponent id:" + id);
        //await JS.InvokeVoidAsync("RequestAnimationFrame", DotNetObjectReference.Create(this), "Redraw", canvas);
    }

    public class TransformMatrix
    {
        public float a { get; set; }
        public float b { get; set; }
        public float c { get; set; }
        public float d { get; set; }
        public float e { get; set; }
        public float f { get; set; }

    }
}
